syntax = "proto3";
option go_package = "./proto;pb";

// Client submits task to leader
service Scheduler {
  rpc ListPrimes(PrimeReq) returns (PrimeRes);
}

message PrimeReq {
  int32 Num = 1;
}

message PrimeRes {
  repeated int32 PrimeList = 1;
  string ProcessedBy = 2;
}

// Leader pings workers to check alive
service Worker {
  rpc ListPrimes(PrimeReq) returns (PrimeRes);
  rpc Heartbeat(HeartbeatReq) returns (HeartbeatRes);
}

message HeartbeatReq {
}

message HeartbeatRes {
  bool IsAlive = 1;
}

// Worker registers with leader
service LeaderRegistry {
  rpc RegisterWorker(RegisterReq) returns (RegisterRes);
}

message RegisterReq {
  string WorkerID = 1;
  string WorkerAddr = 2;
}

message RegisterRes {
  bool Success = 1;
  string Msg = 2;
}

// Leader election (Bully algorithm)
service Election {
  rpc StartElection(ElectionReq) returns (ElectionRes);
  rpc AnnounceLeader(LeaderReq) returns (LeaderRes);
}

message ElectionReq {
  int32 SenderID = 1;
}

message ElectionRes {
  bool Ok = 1;
}

message LeaderReq {
  int32 LeaderID = 1;
}

message LeaderRes {
  bool Ack = 1;
}
